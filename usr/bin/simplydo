#!/bin/bash

SCRIPT_DIR="/usr/bin/simplydo"  # Replace with the actual path to the script directory

print_options() {
    local selected_option=$1
    shift
    local options=("$@")
    local i=1
    for option in "${options[@]}"; do
        if [ $i -eq $selected_option ]; then
            echo "=> ${option}"
        else
            echo "   ${option}"
        fi
        ((i++))
    done
}

if [ "$1" = "start" ]; then
    #!/bin/bash
    # Check if Ruby is already installed

    r_mode=0
    if command -v ruby >/dev/null 2>&1; then
        r_mode=1
    else
        if snap run ruby --version >/dev/null 2>&1; then
            r_mode=2
        fi
    fi

    # Find the process ID (PID) of the server.rb process
    server_pid=$(pgrep -f server.rb)

    # Check if the process is running
    if [ -n "$server_pid" ]; then
      # Kill the process
      sudo kill -9 "$server_pid"
      echo "Server process already running as (PID: $server_pid) has been terminated."
    fi


    if [ "$r_mode" -eq 1 ]; then
        echo "mode 1"
        ruby /usr/share/simplydo/server.rb > /dev/null &
    elif [ "$r_mode" -eq 2 ]; then
        echo "mode2"
        snap run ruby /usr/share/simplydo/server.rb > /dev/null &
    else
        echo "Ruby not found! Cannot start server"
    fi

    # Wait for the server process to start
    sleep 1

    # Check if the server process is running
    if pgrep -f "server.rb" >/dev/null; then
        echo "Server started successfully"
    else
        echo "Failed to start the server"
    fi
elif [ "$1" = "stop" ]; then
    # Find the process ID (PID) of the server.rb process
    server_pid=$(pgrep -f server.rb)

    # Check if the process is running
    if [ -n "$server_pid" ]; then
      # Kill the process
      sudo kill -9 "$server_pid"
      echo "Server process running as (PID: $server_pid) has been terminated."
    fi
elif [ "$1" = "create" ] || [ "$1" = "c" ]; then
    project_name="$2"  # Get the project name from the command argument

    # Check if the project name is provided
    if [ -z "$project_name" ]; then
        echo "Please provide a project name. Usage: simplydo create <project_name>"
        exit 1
    fi

    

    # Set initial selected option and current option
     selected_option=1
     current_option=1

    # Ask user to select frontend frameworks
    frontend_options=("Angular" "React" "Vue" "Flutter" "Express JS" "RubyOnRails" "I don't have frontend included in my project")

    echo "Select frontend framework(s) for the project (use arrow keys to navigate, press space to select/deselect, and press enter to proceed):"
    while true; do
        tput civis  # Hide cursor
        print_options $selected_option "${frontend_options[@]}"
        read -rsn1 -d ' ' input
        if [ "$input" == $'\x1b' ]; then
        	echo "esc"
            read -rsn2 -t 0.1 key
            if [[ $key == "[A" ]] && [ $selected_option -gt 1 ]; then
            	echo "up"
                ((selected_option--))
                ((current_option--))
                #echo -ne "\033[${#frontend_options[@]}A\r"
            elif [[ $key == "[B" ]] && [ $selected_option -lt ${#frontend_options[@]} ]; then
            	echo "dpwn"
                ((selected_option++))
                ((current_option++))
                #echo -ne "\033[${#frontend_options[@]}A\r"
            fi
        elif [[ $input == " " ]]; then
        	echo "space"
            if [ "$selected_option" -eq ${#frontend_options[@]} ]; then
                selected_frontend="I don't have frontend included in my project"
                break
            fi
            selected_frontend="${frontend_options[selected_option-1]}"
            break
        fi
    done


    # Print the selected options
    echo "Selected frontend framework(s): $selected_frontend"
    echo "Selected backend framework(s): $selected_backend"
    echo "Selected database(s): $selected_db"
else
    echo "Invalid command. Usage: simplydo [start|stop|create]"
fi

